basePath: /api/v1
definitions:
  models.ApproveShopReq:
    properties:
      shop_id:
        type: integer
      userId:
        type: integer
    type: object
  models.ChangePassword:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.ResendOTPReq:
    properties:
      token:
        type: string
    type: object
  models.UserProfileRes:
    properties:
      user_avatar:
        type: string
      user_birthday:
        type: string
      user_fullname:
        type: string
      user_gender:
        type: string
      user_mobile:
        type: string
      user_nickname:
        type: string
    type: object
  models.VerifyOTPReq:
    properties:
      otp:
        type: string
      token:
        type: string
    type: object
  response.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: duyphong0280@gmail.com
    name: Philip Nguyen
  description: EzyMark Fiber API provides endpoints for managing products, orders,
    and users in an e-commerce system.
  license:
    name: MIT
    url: https://github.com/phongnd2802/ezy-mark/blob/main/LICENSE
  termsOfService: http://swagger.io/terms/
  title: EzyMark Fiber API
  version: "1.0"
paths:
  /admin/shop/approve:
    patch:
      consumes:
      - application/json
      description: Allows an admin to approve a shop by providing the shop ID.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.ApproveShopReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Approve a shop
      tags:
      - ShopAdmin Management
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out the authenticated user by revoking their session and tokens.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Logout
      tags:
      - Authentication Management
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refreshes the access token using a valid refresh token.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Refresh Access Token
      tags:
      - Authentication Management
  /auth/resend-otp:
    post:
      consumes:
      - application/json
      description: Resend OTP
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.ResendOTPReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Resend OTP
      tags:
      - Authentication Management
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Login
      tags:
      - Authentication Management
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Register user with email and password
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Register
      tags:
      - Authentication Management
  /auth/verify-otp:
    get:
      consumes:
      - application/json
      description: Get Time To Live OTP
      parameters:
      - description: Token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get TTL OTP
      tags:
      - Authentication Management
    post:
      consumes:
      - application/json
      description: Authenticate OTP
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.VerifyOTPReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Verify OTP
      tags:
      - Authentication Management
  /shop/register:
    post:
      consumes:
      - multipart/form-data
      description: Allows users to register a new shop with the required information,
        including shop name, shop logo, business license, and address.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Shop name
        in: formData
        name: shop_name
        required: true
        type: string
      - description: Shop description
        in: formData
        name: shop_description
        required: true
        type: string
      - description: Shop logo
        in: formData
        name: shop_logo
        required: true
        type: file
      - description: Phone number
        in: formData
        name: shop_phone
        required: true
        type: string
      - description: Email
        in: formData
        name: shop_email
        required: true
        type: string
      - description: Address
        in: formData
        name: shop_address
        required: true
        type: string
      - description: Business license
        in: formData
        name: business_license
        required: true
        type: file
      - description: Tax ID
        in: formData
        name: tax_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register a new shop
      tags:
      - Shop Management
  /user/change-password:
    patch:
      consumes:
      - application/json
      description: Allows users to change their password by providing the old password
        and the new password.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Change Password
      tags:
      - UserInfo Management
  /user/get-info:
    get:
      consumes:
      - application/json
      description: Fetch the authenticated user's profile information.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.UserProfileRes'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Retrieve User Information
      tags:
      - UserInfo Management
  /user/update-info:
    patch:
      consumes:
      - multipart/form-data
      description: Allows users to update their profile information, including nickname,
        full name, mobile, gender, birthday, and avatar.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User Nickname
        in: formData
        name: user_nickname
        required: true
        type: string
      - description: User Full Name
        in: formData
        name: user_fullname
        type: string
      - description: User Mobile Number
        in: formData
        name: user_mobile
        type: string
      - description: User Gender (male, female, other)
        in: formData
        name: user_gender
        type: string
      - description: User Birthday (YYYY-MM-DD)
        in: formData
        name: user_birthday
        type: string
      - description: 'User Avatar File (Only images: jpg, jpeg, png)'
        in: formData
        name: user_avatar
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.UserProfileRes'
              type: object
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update user profile
      tags:
      - UserInfo Management
swagger: "2.0"
