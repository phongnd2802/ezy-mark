// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type GenderEnum string

const (
	GenderEnumMale   GenderEnum = "male"
	GenderEnumFemale GenderEnum = "female"
	GenderEnumOther  GenderEnum = "other"
)

func (e *GenderEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GenderEnum(s)
	case string:
		*e = GenderEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for GenderEnum: %T", src)
	}
	return nil
}

type NullGenderEnum struct {
	GenderEnum GenderEnum `json:"gender_enum"`
	Valid      bool       `json:"valid"` // Valid is true if GenderEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGenderEnum) Scan(value interface{}) error {
	if value == nil {
		ns.GenderEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GenderEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGenderEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GenderEnum), nil
}

type Permission struct {
	PermissionID   int32       `json:"permission_id"`
	PermissionName string      `json:"permission_name"`
	Description    pgtype.Text `json:"description"`
	CreatedAt      time.Time   `json:"created_at"`
	UpdatedAt      time.Time   `json:"updated_at"`
}

type Role struct {
	RoleID      int32       `json:"role_id"`
	RoleName    string      `json:"role_name"`
	Description pgtype.Text `json:"description"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

type RolePermission struct {
	RoleID       int32     `json:"role_id"`
	PermissionID int32     `json:"permission_id"`
	GrantedAt    time.Time `json:"granted_at"`
}

type Shop struct {
	ShopID          int64              `json:"shop_id"`
	OwnerID         int64              `json:"owner_id"`
	ShopName        string             `json:"shop_name"`
	ShopDescription pgtype.Text        `json:"shop_description"`
	ShopLogo        pgtype.Text        `json:"shop_logo"`
	ShopPhone       pgtype.Text        `json:"shop_phone"`
	ShopEmail       string             `json:"shop_email"`
	ShopAddress     pgtype.Text        `json:"shop_address"`
	BusinessLicense pgtype.Text        `json:"business_license"`
	TaxID           pgtype.Text        `json:"tax_id"`
	IsActive        pgtype.Bool        `json:"is_active"`
	IsVerified      pgtype.Bool        `json:"is_verified"`
	VerifiedBy      pgtype.Int8        `json:"verified_by"`
	VerifiedAt      pgtype.Timestamptz `json:"verified_at"`
	CreatedAt       time.Time          `json:"created_at"`
	UpdatedAt       time.Time          `json:"updated_at"`
}

type UserBase struct {
	UserID       int64       `json:"user_id"`
	UserEmail    string      `json:"user_email"`
	UserHash     string      `json:"user_hash"`
	UserPassword string      `json:"user_password"`
	UserOtp      string      `json:"user_otp"`
	IsVerified   pgtype.Bool `json:"is_verified"`
	IsDeleted    pgtype.Bool `json:"is_deleted"`
	CreatedAt    time.Time   `json:"created_at"`
	UpdatedAt    time.Time   `json:"updated_at"`
}

type UserProfile struct {
	UserID       int64          `json:"user_id"`
	UserEmail    string         `json:"user_email"`
	UserNickname string         `json:"user_nickname"`
	UserFullname pgtype.Text    `json:"user_fullname"`
	UserAvatar   pgtype.Text    `json:"user_avatar"`
	UserMobile   pgtype.Text    `json:"user_mobile"`
	UserGender   NullGenderEnum `json:"user_gender"`
	UserBirthday pgtype.Date    `json:"user_birthday"`
	CreatedAt    time.Time      `json:"created_at"`
	UpdatedAt    time.Time      `json:"updated_at"`
}

type UserRole struct {
	UserID     int64     `json:"user_id"`
	RoleID     int32     `json:"role_id"`
	AssignedAt time.Time `json:"assigned_at"`
}

type UserSession struct {
	SessionID        int64              `json:"session_id"`
	SubToken         string             `json:"sub_token"`
	UserID           int64              `json:"user_id"`
	RefreshToken     string             `json:"refresh_token"`
	RefreshTokenUsed pgtype.Text        `json:"refresh_token_used"`
	UserAgent        string             `json:"user_agent"`
	ClientIp         string             `json:"client_ip"`
	IsBlocked        bool               `json:"is_blocked"`
	UserLoginTime    pgtype.Timestamptz `json:"user_login_time"`
	ExpiresAt        time.Time          `json:"expires_at"`
	CreatedAt        time.Time          `json:"created_at"`
}
